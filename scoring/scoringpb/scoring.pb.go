// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: scoring/scoringpb/scoring.proto

package scoringpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExposureNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the ExposureSummary we just received which prompted the call to this service.
	ExposureSummary *ExposureSummary `protobuf:"bytes,1,opt,name=exposure_summary,json=exposureSummary" json:"exposure_summary,omitempty"`
	// Previously received ExposureSummaries from past 14 days that have not yet
	// caused a notification, in addition to the new ExposureSummary that could.
	UnusedExposureSummaries []*ExposureSummary `protobuf:"bytes,2,rep,name=unused_exposure_summaries,json=unusedExposureSummaries" json:"unused_exposure_summaries,omitempty"`
}

func (x *ExposureNotificationRequest) Reset() {
	*x = ExposureNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_scoringpb_scoring_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotificationRequest) ProtoMessage() {}

func (x *ExposureNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_scoringpb_scoring_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotificationRequest.ProtoReflect.Descriptor instead.
func (*ExposureNotificationRequest) Descriptor() ([]byte, []int) {
	return file_scoring_scoringpb_scoring_proto_rawDescGZIP(), []int{0}
}

func (x *ExposureNotificationRequest) GetExposureSummary() *ExposureSummary {
	if x != nil {
		return x.ExposureSummary
	}
	return nil
}

func (x *ExposureNotificationRequest) GetUnusedExposureSummaries() []*ExposureSummary {
	if x != nil {
		return x.UnusedExposureSummaries
	}
	return nil
}

type ExposureNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a notification should be shown to user, it will be based on data in this message.
	// If empty, user gets no notification.
	ExposureNotification *ExposureNotification `protobuf:"bytes,1,opt,name=exposure_notification,json=exposureNotification" json:"exposure_notification,omitempty"`
}

func (x *ExposureNotificationResponse) Reset() {
	*x = ExposureNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_scoringpb_scoring_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotificationResponse) ProtoMessage() {}

func (x *ExposureNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_scoringpb_scoring_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotificationResponse.ProtoReflect.Descriptor instead.
func (*ExposureNotificationResponse) Descriptor() ([]byte, []int) {
	return file_scoring_scoringpb_scoring_proto_rawDescGZIP(), []int{1}
}

func (x *ExposureNotificationResponse) GetExposureNotification() *ExposureNotification {
	if x != nil {
		return x.ExposureNotification
	}
	return nil
}

// Modeled after
// https://developer.apple.com/documentation/exposurenotification/enexposuredetectionsummary
// but with slightly different fields according to our usage needs.
type ExposureSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Durations of exposure at different levels.
	AttenuationDurations *ExposureSummary_AttenuationDurations `protobuf:"bytes,1,opt,name=attenuation_durations,json=attenuationDurations" json:"attenuation_durations,omitempty"`
	// The number of keys that matched for an exposure detection.
	// Each key corresponds to a single device and day.
	// Available only for Apple scoring version 1 (ENAPIVersion = 1)
	MatchedKeyCount *int32 `protobuf:"varint,2,opt,name=matched_key_count,json=matchedKeyCount" json:"matched_key_count,omitempty"`
	// Number of days since the most recent exposure.
	// The values for this property include 0 = today, 1 = yesterday, and so on,
	// relative to day_received.
	DaysSinceLastExposure *int32 `protobuf:"varint,3,opt,name=days_since_last_exposure,json=daysSinceLastExposure" json:"days_since_last_exposure,omitempty"`
	// The time this ExposureSummary was received, expressed as a UNIX timestamp in
	// seconds. WE MUST KNOW WHICH OTHER EXPOSURE SUMMARIES WERE THIS DAY. I'm thinking
	// maybe just saving the time zone as well.
	// NOTE: It's easy to get this wrong when rounded to a day and dealing with
	// different time zones, and we still have a bug around this in the app, so be
	// careful and make sure to get this right. Let's discuss this more.
	TimeReceived *int32 `protobuf:"varint,4,opt,name=time_received,json=timeReceived" json:"time_received,omitempty"`
}

func (x *ExposureSummary) Reset() {
	*x = ExposureSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_scoringpb_scoring_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureSummary) ProtoMessage() {}

func (x *ExposureSummary) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_scoringpb_scoring_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureSummary.ProtoReflect.Descriptor instead.
func (*ExposureSummary) Descriptor() ([]byte, []int) {
	return file_scoring_scoringpb_scoring_proto_rawDescGZIP(), []int{2}
}

func (x *ExposureSummary) GetAttenuationDurations() *ExposureSummary_AttenuationDurations {
	if x != nil {
		return x.AttenuationDurations
	}
	return nil
}

func (x *ExposureSummary) GetMatchedKeyCount() int32 {
	if x != nil && x.MatchedKeyCount != nil {
		return *x.MatchedKeyCount
	}
	return 0
}

func (x *ExposureSummary) GetDaysSinceLastExposure() int32 {
	if x != nil && x.DaysSinceLastExposure != nil {
		return *x.DaysSinceLastExposure
	}
	return 0
}

func (x *ExposureSummary) GetTimeReceived() int32 {
	if x != nil && x.TimeReceived != nil {
		return *x.TimeReceived
	}
	return 0
}

type ExposureNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ExposureSummaries that went into the decision to notify the user of a
	// possible exposure.
	// It is up to the app to potentially request additional information through
	// ExposureInfos that are associated with these summaries, and to determine what
	// exposures to show to the user.
	ExposureSummaries []*ExposureSummary `protobuf:"bytes,1,rep,name=exposure_summaries,json=exposureSummaries" json:"exposure_summaries,omitempty"`
}

func (x *ExposureNotification) Reset() {
	*x = ExposureNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_scoringpb_scoring_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotification) ProtoMessage() {}

func (x *ExposureNotification) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_scoringpb_scoring_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotification.ProtoReflect.Descriptor instead.
func (*ExposureNotification) Descriptor() ([]byte, []int) {
	return file_scoring_scoringpb_scoring_proto_rawDescGZIP(), []int{3}
}

func (x *ExposureNotification) GetExposureSummaries() []*ExposureSummary {
	if x != nil {
		return x.ExposureSummaries
	}
	return nil
}

type ExposureSummary_AttenuationDurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowBucketDurationSeconds    *int32 `protobuf:"varint,1,opt,name=low_bucket_duration_seconds,json=lowBucketDurationSeconds" json:"low_bucket_duration_seconds,omitempty"`
	MediumBucketDurationSeconds *int32 `protobuf:"varint,2,opt,name=medium_bucket_duration_seconds,json=mediumBucketDurationSeconds" json:"medium_bucket_duration_seconds,omitempty"`
	HighBucketDurationSeconds   *int32 `protobuf:"varint,3,opt,name=high_bucket_duration_seconds,json=highBucketDurationSeconds" json:"high_bucket_duration_seconds,omitempty"`
}

func (x *ExposureSummary_AttenuationDurations) Reset() {
	*x = ExposureSummary_AttenuationDurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scoring_scoringpb_scoring_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureSummary_AttenuationDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureSummary_AttenuationDurations) ProtoMessage() {}

func (x *ExposureSummary_AttenuationDurations) ProtoReflect() protoreflect.Message {
	mi := &file_scoring_scoringpb_scoring_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureSummary_AttenuationDurations.ProtoReflect.Descriptor instead.
func (*ExposureSummary_AttenuationDurations) Descriptor() ([]byte, []int) {
	return file_scoring_scoringpb_scoring_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ExposureSummary_AttenuationDurations) GetLowBucketDurationSeconds() int32 {
	if x != nil && x.LowBucketDurationSeconds != nil {
		return *x.LowBucketDurationSeconds
	}
	return 0
}

func (x *ExposureSummary_AttenuationDurations) GetMediumBucketDurationSeconds() int32 {
	if x != nil && x.MediumBucketDurationSeconds != nil {
		return *x.MediumBucketDurationSeconds
	}
	return 0
}

func (x *ExposureSummary_AttenuationDurations) GetHighBucketDurationSeconds() int32 {
	if x != nil && x.HighBucketDurationSeconds != nil {
		return *x.HighBucketDurationSeconds
	}
	return 0
}

var File_scoring_scoringpb_scoring_proto protoreflect.FileDescriptor

var file_scoring_scoringpb_scoring_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x19, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x17, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x03, 0x0a, 0x0f, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x62, 0x0a,
	0x15, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0xdb, 0x01, 0x0a, 0x14,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6c, 0x6f, 0x77, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x68, 0x69, 0x67, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x14, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x32, 0x6f, 0x0a, 0x0e, 0x53, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x62,
}

var (
	file_scoring_scoringpb_scoring_proto_rawDescOnce sync.Once
	file_scoring_scoringpb_scoring_proto_rawDescData = file_scoring_scoringpb_scoring_proto_rawDesc
)

func file_scoring_scoringpb_scoring_proto_rawDescGZIP() []byte {
	file_scoring_scoringpb_scoring_proto_rawDescOnce.Do(func() {
		file_scoring_scoringpb_scoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_scoring_scoringpb_scoring_proto_rawDescData)
	})
	return file_scoring_scoringpb_scoring_proto_rawDescData
}

var file_scoring_scoringpb_scoring_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_scoring_scoringpb_scoring_proto_goTypes = []interface{}{
	(*ExposureNotificationRequest)(nil),          // 0: scoring.ExposureNotificationRequest
	(*ExposureNotificationResponse)(nil),         // 1: scoring.ExposureNotificationResponse
	(*ExposureSummary)(nil),                      // 2: scoring.ExposureSummary
	(*ExposureNotification)(nil),                 // 3: scoring.ExposureNotification
	(*ExposureSummary_AttenuationDurations)(nil), // 4: scoring.ExposureSummary.AttenuationDurations
}
var file_scoring_scoringpb_scoring_proto_depIdxs = []int32{
	2, // 0: scoring.ExposureNotificationRequest.exposure_summary:type_name -> scoring.ExposureSummary
	2, // 1: scoring.ExposureNotificationRequest.unused_exposure_summaries:type_name -> scoring.ExposureSummary
	3, // 2: scoring.ExposureNotificationResponse.exposure_notification:type_name -> scoring.ExposureNotification
	4, // 3: scoring.ExposureSummary.attenuation_durations:type_name -> scoring.ExposureSummary.AttenuationDurations
	2, // 4: scoring.ExposureNotification.exposure_summaries:type_name -> scoring.ExposureSummary
	0, // 5: scoring.ScoringService.shouldNotify:input_type -> scoring.ExposureNotificationRequest
	1, // 6: scoring.ScoringService.shouldNotify:output_type -> scoring.ExposureNotificationResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_scoring_scoringpb_scoring_proto_init() }
func file_scoring_scoringpb_scoring_proto_init() {
	if File_scoring_scoringpb_scoring_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scoring_scoringpb_scoring_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_scoringpb_scoring_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_scoringpb_scoring_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_scoringpb_scoring_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scoring_scoringpb_scoring_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureSummary_AttenuationDurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scoring_scoringpb_scoring_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scoring_scoringpb_scoring_proto_goTypes,
		DependencyIndexes: file_scoring_scoringpb_scoring_proto_depIdxs,
		MessageInfos:      file_scoring_scoringpb_scoring_proto_msgTypes,
	}.Build()
	File_scoring_scoringpb_scoring_proto = out.File
	file_scoring_scoringpb_scoring_proto_rawDesc = nil
	file_scoring_scoringpb_scoring_proto_goTypes = nil
	file_scoring_scoringpb_scoring_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScoringServiceClient is the client API for ScoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScoringServiceClient interface {
	// Unary
	// Send info on current/previously received exposures that haven't yet resulted in a notification.
	ShouldNotify(ctx context.Context, in *ExposureNotificationRequest, opts ...grpc.CallOption) (*ExposureNotificationResponse, error)
}

type scoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoringServiceClient(cc grpc.ClientConnInterface) ScoringServiceClient {
	return &scoringServiceClient{cc}
}

func (c *scoringServiceClient) ShouldNotify(ctx context.Context, in *ExposureNotificationRequest, opts ...grpc.CallOption) (*ExposureNotificationResponse, error) {
	out := new(ExposureNotificationResponse)
	err := c.cc.Invoke(ctx, "/scoring.ScoringService/shouldNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoringServiceServer is the server API for ScoringService service.
type ScoringServiceServer interface {
	// Unary
	// Send info on current/previously received exposures that haven't yet resulted in a notification.
	ShouldNotify(context.Context, *ExposureNotificationRequest) (*ExposureNotificationResponse, error)
}

// UnimplementedScoringServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScoringServiceServer struct {
}

func (*UnimplementedScoringServiceServer) ShouldNotify(context.Context, *ExposureNotificationRequest) (*ExposureNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldNotify not implemented")
}

func RegisterScoringServiceServer(s *grpc.Server, srv ScoringServiceServer) {
	s.RegisterService(&_ScoringService_serviceDesc, srv)
}

func _ScoringService_ShouldNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposureNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).ShouldNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scoring.ScoringService/ShouldNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).ShouldNotify(ctx, req.(*ExposureNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScoringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scoring.ScoringService",
	HandlerType: (*ScoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shouldNotify",
			Handler:    _ScoringService_ShouldNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scoring/scoringpb/scoring.proto",
}
