// Protobuf style guide: https://developers.google.com/protocol-buffers/docs/style

syntax="proto2";

option go_package = ".;pb";

package scoringservice;

service NotificationServer {
  // Send information on current and previously received exposures that haven't yet resulted in a notification.
  rpc shouldNotify(ExposureNotificationRequest) returns (ExposureNotificationResponse) {}
}

message ExposureNotificationRequest {
  // This is the ExposureSummary we just received which prompted the call to
  // this service.
  optional ExposureSummary exposure_summary = 1;

  // This is previously received ExposureSummaries from the past 14 days that
  // have not yet caused a notification, but in addition to the new
  // ExposureSummary perhaps could.
  repeated ExposureSummary unused_exposure_summaries = 2;
}

message ExposureNotificationResponse {
  // If a notification should be shown to the user based on the information
  // sent, it will be based on the data in this message.
  // If empty, there will be no notification.
  optional ExposureNotification exposure_notification = 1;
}

// This is modeled after
// https://developer.apple.com/documentation/exposurenotification/enexposuredetectionsummary
// but has slightly different fields according to our usage needs.
message ExposureSummary {
  message AttenuationDurations {
    optional int32 low_bucket_duration_seconds = 1;
    optional int32 medium_bucket_duration_seconds = 2;
    optional int32 high_bucket_duration_seconds = 3;
  }

  // Durations of exposure at different levels.
  optional AttenuationDurations attenuation_durations = 1;

  // The number of keys that matched for an exposure detection.
  // Each key corresponds to a single device and day.
  optional int32 matched_key_count = 2;
  
  // Number of days since the most recent exposure.
  // The values for this property include 0 = today, 1 = yesterday, and so on,
  // relative to day_received.
  optional int32 days_since_last_exposure = 3;

  // The time this ExposureSummary was received, expressed as a UNIX timestamp in
  // seconds. WE MUST KNOW WHICH OTHER EXPOSURESUMMARIES WERE THIS DAY. I'm thinking
  // maybe just saving the time zone as well.
  // NOTE: It's easy to get this wrong when rounded to a day and dealing with
  // different time zones, and we still have a bug around this in the app, so be
  // careful and make sure to get this right.
  // discuss this when not tired.
  optional int32 time_received = 4;
}

message ExposureNotification {
  // The ExposureSummaries that went into the decision to notify the user of a
  // possible exposure.
  // It is up to the app to potentially request additional information through
  // ExposureInfos that are associated with these summaries, and to determine what
  // exposures to show to the user.
  repeated ExposureSummary exposure_summaries = 1;
}


// Logs data relevant for metrics and analysis.
// Should only be logged for users who have consented.
service Logger {
  rpc LogEvent (LogRequest) returns (LogResponse);
}

message LogRequest {
  // Exposure notification data occurring in the past 14 days.
  // (May be none.)
  repeated ExposureNotification exposure_notifications = 1;

  // Any ExposureSummaries that have not yet led to a notification.
  repeated ExposureSummary unused_exposure_summaries = 2;

  // Any (non-PII) data pertaining to the user status.
  repeated UserStatus user_status = 3;
}

  message UserStatus {
    message TestData {
      enum TestResult {
        POSITIVE = 1;
        NEGATIVE = 2;
      }
      // COVID test result.
      optional TestResult test_result = 1;

      // UNIX timestamp representing the day this test data was entered.
      // Note about date as earlier, make sure to get this right.
      optional int32 date_entered = 2;

      // Date the test was performed.
      optional int32 date_of_test = 3;
    }
  }

message LogResponse {
  enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }
  optional Status status = 1;
}
