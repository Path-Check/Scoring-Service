// Protobuf style guide: https://developers.google.com/protocol-buffers/docs/style

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: notification0.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserStatus_TestData_TestResult int32

const (
	UserStatus_TestData_POSITIVE UserStatus_TestData_TestResult = 1
	UserStatus_TestData_NEGATIVE UserStatus_TestData_TestResult = 2
)

// Enum value maps for UserStatus_TestData_TestResult.
var (
	UserStatus_TestData_TestResult_name = map[int32]string{
		1: "POSITIVE",
		2: "NEGATIVE",
	}
	UserStatus_TestData_TestResult_value = map[string]int32{
		"POSITIVE": 1,
		"NEGATIVE": 2,
	}
)

func (x UserStatus_TestData_TestResult) Enum() *UserStatus_TestData_TestResult {
	p := new(UserStatus_TestData_TestResult)
	*p = x
	return p
}

func (x UserStatus_TestData_TestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus_TestData_TestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_notification0_proto_enumTypes[0].Descriptor()
}

func (UserStatus_TestData_TestResult) Type() protoreflect.EnumType {
	return &file_notification0_proto_enumTypes[0]
}

func (x UserStatus_TestData_TestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserStatus_TestData_TestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserStatus_TestData_TestResult(num)
	return nil
}

// Deprecated: Use UserStatus_TestData_TestResult.Descriptor instead.
func (UserStatus_TestData_TestResult) EnumDescriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{5, 0, 0}
}

type LogResponse_Status int32

const (
	LogResponse_UNKNOWN LogResponse_Status = 0
	LogResponse_SUCCESS LogResponse_Status = 1
	LogResponse_FAILURE LogResponse_Status = 2
)

// Enum value maps for LogResponse_Status.
var (
	LogResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
	}
	LogResponse_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"SUCCESS": 1,
		"FAILURE": 2,
	}
)

func (x LogResponse_Status) Enum() *LogResponse_Status {
	p := new(LogResponse_Status)
	*p = x
	return p
}

func (x LogResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_notification0_proto_enumTypes[1].Descriptor()
}

func (LogResponse_Status) Type() protoreflect.EnumType {
	return &file_notification0_proto_enumTypes[1]
}

func (x LogResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LogResponse_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LogResponse_Status(num)
	return nil
}

// Deprecated: Use LogResponse_Status.Descriptor instead.
func (LogResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{6, 0}
}

type ExposureNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the ExposureSummary we just received which prompted the call to
	// this service.
	ExposureSummary *ExposureSummary `protobuf:"bytes,1,opt,name=exposure_summary,json=exposureSummary" json:"exposure_summary,omitempty"`
	// This is previously received ExposureSummaries from the past 14 days that
	// have not yet caused a notification, but in addition to the new
	// ExposureSummary perhaps could.
	UnusedExposureSummaries []*ExposureSummary `protobuf:"bytes,2,rep,name=unused_exposure_summaries,json=unusedExposureSummaries" json:"unused_exposure_summaries,omitempty"`
}

func (x *ExposureNotificationRequest) Reset() {
	*x = ExposureNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotificationRequest) ProtoMessage() {}

func (x *ExposureNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotificationRequest.ProtoReflect.Descriptor instead.
func (*ExposureNotificationRequest) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{0}
}

func (x *ExposureNotificationRequest) GetExposureSummary() *ExposureSummary {
	if x != nil {
		return x.ExposureSummary
	}
	return nil
}

func (x *ExposureNotificationRequest) GetUnusedExposureSummaries() []*ExposureSummary {
	if x != nil {
		return x.UnusedExposureSummaries
	}
	return nil
}

type ExposureNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a notification should be shown to the user based on the information
	// sent, it will be based on the data in this message.
	// If empty, there will be no notification.
	ExposureNotification *ExposureNotification `protobuf:"bytes,1,opt,name=exposure_notification,json=exposureNotification" json:"exposure_notification,omitempty"`
}

func (x *ExposureNotificationResponse) Reset() {
	*x = ExposureNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotificationResponse) ProtoMessage() {}

func (x *ExposureNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotificationResponse.ProtoReflect.Descriptor instead.
func (*ExposureNotificationResponse) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{1}
}

func (x *ExposureNotificationResponse) GetExposureNotification() *ExposureNotification {
	if x != nil {
		return x.ExposureNotification
	}
	return nil
}

// This is modeled after
// https://developer.apple.com/documentation/exposurenotification/enexposuredetectionsummary
// but has slightly different fields according to our usage needs.
type ExposureSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Durations of exposure at different levels.
	AttenuationDurations *ExposureSummary_AttenuationDurations `protobuf:"bytes,1,opt,name=attenuation_durations,json=attenuationDurations" json:"attenuation_durations,omitempty"`
	// The number of keys that matched for an exposure detection.
	// Each key corresponds to a single device and day.
	MatchedKeyCount *int32 `protobuf:"varint,2,opt,name=matched_key_count,json=matchedKeyCount" json:"matched_key_count,omitempty"`
	// Number of days since the most recent exposure.
	// The values for this property include 0 = today, 1 = yesterday, and so on,
	// relative to day_received.
	DaysSinceLastExposure *int32 `protobuf:"varint,3,opt,name=days_since_last_exposure,json=daysSinceLastExposure" json:"days_since_last_exposure,omitempty"`
	// The time this ExposureSummary was received, expressed as a UNIX timestamp in
	// seconds. WE MUST KNOW WHICH OTHER EXPOSURESUMMARIES WERE THIS DAY. I'm thinking
	// maybe just saving the time zone as well.
	// NOTE: It's easy to get this wrong when rounded to a day and dealing with
	// different time zones, and we still have a bug around this in the app, so be
	// careful and make sure to get this right.
	// discuss this when not tired.
	TimeReceived *int32 `protobuf:"varint,4,opt,name=time_received,json=timeReceived" json:"time_received,omitempty"`
}

func (x *ExposureSummary) Reset() {
	*x = ExposureSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureSummary) ProtoMessage() {}

func (x *ExposureSummary) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureSummary.ProtoReflect.Descriptor instead.
func (*ExposureSummary) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{2}
}

func (x *ExposureSummary) GetAttenuationDurations() *ExposureSummary_AttenuationDurations {
	if x != nil {
		return x.AttenuationDurations
	}
	return nil
}

func (x *ExposureSummary) GetMatchedKeyCount() int32 {
	if x != nil && x.MatchedKeyCount != nil {
		return *x.MatchedKeyCount
	}
	return 0
}

func (x *ExposureSummary) GetDaysSinceLastExposure() int32 {
	if x != nil && x.DaysSinceLastExposure != nil {
		return *x.DaysSinceLastExposure
	}
	return 0
}

func (x *ExposureSummary) GetTimeReceived() int32 {
	if x != nil && x.TimeReceived != nil {
		return *x.TimeReceived
	}
	return 0
}

type ExposureNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ExposureSummaries that went into the decision to notify the user of a
	// possible exposure.
	// It is up to the app to potentially request additional information through
	// ExposureInfos that are associated with these summaries, and to determine what
	// exposures to show to the user.
	ExposureSummaries []*ExposureSummary `protobuf:"bytes,1,rep,name=exposure_summaries,json=exposureSummaries" json:"exposure_summaries,omitempty"`
}

func (x *ExposureNotification) Reset() {
	*x = ExposureNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureNotification) ProtoMessage() {}

func (x *ExposureNotification) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureNotification.ProtoReflect.Descriptor instead.
func (*ExposureNotification) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{3}
}

func (x *ExposureNotification) GetExposureSummaries() []*ExposureSummary {
	if x != nil {
		return x.ExposureSummaries
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exposure notification data occurring in the past 14 days.
	// (May be none.)
	ExposureNotifications []*ExposureNotification `protobuf:"bytes,1,rep,name=exposure_notifications,json=exposureNotifications" json:"exposure_notifications,omitempty"`
	// Any ExposureSummaries that have not yet led to a notification.
	UnusedExposureSummaries []*ExposureSummary `protobuf:"bytes,2,rep,name=unused_exposure_summaries,json=unusedExposureSummaries" json:"unused_exposure_summaries,omitempty"`
	// Any (non-PII) data pertaining to the user status.
	UserStatus []*UserStatus `protobuf:"bytes,3,rep,name=user_status,json=userStatus" json:"user_status,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{4}
}

func (x *LogRequest) GetExposureNotifications() []*ExposureNotification {
	if x != nil {
		return x.ExposureNotifications
	}
	return nil
}

func (x *LogRequest) GetUnusedExposureSummaries() []*ExposureSummary {
	if x != nil {
		return x.UnusedExposureSummaries
	}
	return nil
}

func (x *LogRequest) GetUserStatus() []*UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

type UserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserStatus) Reset() {
	*x = UserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatus) ProtoMessage() {}

func (x *UserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatus.ProtoReflect.Descriptor instead.
func (*UserStatus) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{5}
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *LogResponse_Status `protobuf:"varint,1,opt,name=status,enum=scoringservice.LogResponse_Status" json:"status,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{6}
}

func (x *LogResponse) GetStatus() LogResponse_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return LogResponse_UNKNOWN
}

type ExposureSummary_AttenuationDurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowBucketDurationSeconds    *int32 `protobuf:"varint,1,opt,name=low_bucket_duration_seconds,json=lowBucketDurationSeconds" json:"low_bucket_duration_seconds,omitempty"`
	MediumBucketDurationSeconds *int32 `protobuf:"varint,2,opt,name=medium_bucket_duration_seconds,json=mediumBucketDurationSeconds" json:"medium_bucket_duration_seconds,omitempty"`
	HighBucketDurationSeconds   *int32 `protobuf:"varint,3,opt,name=high_bucket_duration_seconds,json=highBucketDurationSeconds" json:"high_bucket_duration_seconds,omitempty"`
}

func (x *ExposureSummary_AttenuationDurations) Reset() {
	*x = ExposureSummary_AttenuationDurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureSummary_AttenuationDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureSummary_AttenuationDurations) ProtoMessage() {}

func (x *ExposureSummary_AttenuationDurations) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureSummary_AttenuationDurations.ProtoReflect.Descriptor instead.
func (*ExposureSummary_AttenuationDurations) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ExposureSummary_AttenuationDurations) GetLowBucketDurationSeconds() int32 {
	if x != nil && x.LowBucketDurationSeconds != nil {
		return *x.LowBucketDurationSeconds
	}
	return 0
}

func (x *ExposureSummary_AttenuationDurations) GetMediumBucketDurationSeconds() int32 {
	if x != nil && x.MediumBucketDurationSeconds != nil {
		return *x.MediumBucketDurationSeconds
	}
	return 0
}

func (x *ExposureSummary_AttenuationDurations) GetHighBucketDurationSeconds() int32 {
	if x != nil && x.HighBucketDurationSeconds != nil {
		return *x.HighBucketDurationSeconds
	}
	return 0
}

type UserStatus_TestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// COVID test result.
	TestResult *UserStatus_TestData_TestResult `protobuf:"varint,1,opt,name=test_result,json=testResult,enum=scoringservice.UserStatus_TestData_TestResult" json:"test_result,omitempty"`
	// UNIX timestamp representing the day this test data was entered.
	// Note about date as earlier, make sure to get this right.
	DateEntered *int32 `protobuf:"varint,2,opt,name=date_entered,json=dateEntered" json:"date_entered,omitempty"`
	// Date the test was performed.
	DateOfTest *int32 `protobuf:"varint,3,opt,name=date_of_test,json=dateOfTest" json:"date_of_test,omitempty"`
}

func (x *UserStatus_TestData) Reset() {
	*x = UserStatus_TestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notification0_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatus_TestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatus_TestData) ProtoMessage() {}

func (x *UserStatus_TestData) ProtoReflect() protoreflect.Message {
	mi := &file_notification0_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatus_TestData.ProtoReflect.Descriptor instead.
func (*UserStatus_TestData) Descriptor() ([]byte, []int) {
	return file_notification0_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UserStatus_TestData) GetTestResult() UserStatus_TestData_TestResult {
	if x != nil && x.TestResult != nil {
		return *x.TestResult
	}
	return UserStatus_TestData_POSITIVE
}

func (x *UserStatus_TestData) GetDateEntered() int32 {
	if x != nil && x.DateEntered != nil {
		return *x.DateEntered
	}
	return 0
}

func (x *UserStatus_TestData) GetDateOfTest() int32 {
	if x != nil && x.DateOfTest != nil {
		return *x.DateOfTest
	}
	return 0
}

var File_notification0_proto protoreflect.FileDescriptor

var file_notification0_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x5b, 0x0a, 0x19, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x17, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x79,
	0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x03, 0x0a, 0x0f, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x69, 0x0a,
	0x15, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x14, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x1a, 0xdb, 0x01, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6c,
	0x6f, 0x77, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3f, 0x0a, 0x1c, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x68, 0x69, 0x67, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x66, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x19, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x17, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xca, 0x01,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0b, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x28, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x0b, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x32, 0x81, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6b, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x2e,
	0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4d, 0x0a, 0x06, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x2e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70,
	0x62,
}

var (
	file_notification0_proto_rawDescOnce sync.Once
	file_notification0_proto_rawDescData = file_notification0_proto_rawDesc
)

func file_notification0_proto_rawDescGZIP() []byte {
	file_notification0_proto_rawDescOnce.Do(func() {
		file_notification0_proto_rawDescData = protoimpl.X.CompressGZIP(file_notification0_proto_rawDescData)
	})
	return file_notification0_proto_rawDescData
}

var file_notification0_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_notification0_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_notification0_proto_goTypes = []interface{}{
	(UserStatus_TestData_TestResult)(0),          // 0: scoringservice.UserStatus.TestData.TestResult
	(LogResponse_Status)(0),                      // 1: scoringservice.LogResponse.Status
	(*ExposureNotificationRequest)(nil),          // 2: scoringservice.ExposureNotificationRequest
	(*ExposureNotificationResponse)(nil),         // 3: scoringservice.ExposureNotificationResponse
	(*ExposureSummary)(nil),                      // 4: scoringservice.ExposureSummary
	(*ExposureNotification)(nil),                 // 5: scoringservice.ExposureNotification
	(*LogRequest)(nil),                           // 6: scoringservice.LogRequest
	(*UserStatus)(nil),                           // 7: scoringservice.UserStatus
	(*LogResponse)(nil),                          // 8: scoringservice.LogResponse
	(*ExposureSummary_AttenuationDurations)(nil), // 9: scoringservice.ExposureSummary.AttenuationDurations
	(*UserStatus_TestData)(nil),                  // 10: scoringservice.UserStatus.TestData
}
var file_notification0_proto_depIdxs = []int32{
	4,  // 0: scoringservice.ExposureNotificationRequest.exposure_summary:type_name -> scoringservice.ExposureSummary
	4,  // 1: scoringservice.ExposureNotificationRequest.unused_exposure_summaries:type_name -> scoringservice.ExposureSummary
	5,  // 2: scoringservice.ExposureNotificationResponse.exposure_notification:type_name -> scoringservice.ExposureNotification
	9,  // 3: scoringservice.ExposureSummary.attenuation_durations:type_name -> scoringservice.ExposureSummary.AttenuationDurations
	4,  // 4: scoringservice.ExposureNotification.exposure_summaries:type_name -> scoringservice.ExposureSummary
	5,  // 5: scoringservice.LogRequest.exposure_notifications:type_name -> scoringservice.ExposureNotification
	4,  // 6: scoringservice.LogRequest.unused_exposure_summaries:type_name -> scoringservice.ExposureSummary
	7,  // 7: scoringservice.LogRequest.user_status:type_name -> scoringservice.UserStatus
	1,  // 8: scoringservice.LogResponse.status:type_name -> scoringservice.LogResponse.Status
	0,  // 9: scoringservice.UserStatus.TestData.test_result:type_name -> scoringservice.UserStatus.TestData.TestResult
	2,  // 10: scoringservice.NotificationServer.shouldNotify:input_type -> scoringservice.ExposureNotificationRequest
	6,  // 11: scoringservice.Logger.LogEvent:input_type -> scoringservice.LogRequest
	3,  // 12: scoringservice.NotificationServer.shouldNotify:output_type -> scoringservice.ExposureNotificationResponse
	8,  // 13: scoringservice.Logger.LogEvent:output_type -> scoringservice.LogResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_notification0_proto_init() }
func file_notification0_proto_init() {
	if File_notification0_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notification0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureSummary_AttenuationDurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notification0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatus_TestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notification0_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_notification0_proto_goTypes,
		DependencyIndexes: file_notification0_proto_depIdxs,
		EnumInfos:         file_notification0_proto_enumTypes,
		MessageInfos:      file_notification0_proto_msgTypes,
	}.Build()
	File_notification0_proto = out.File
	file_notification0_proto_rawDesc = nil
	file_notification0_proto_goTypes = nil
	file_notification0_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificationServerClient is the client API for NotificationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServerClient interface {
	// Send information on current and previously received exposures that haven't yet resulted in a notification.
	ShouldNotify(ctx context.Context, in *ExposureNotificationRequest, opts ...grpc.CallOption) (*ExposureNotificationResponse, error)
}

type notificationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServerClient(cc grpc.ClientConnInterface) NotificationServerClient {
	return &notificationServerClient{cc}
}

func (c *notificationServerClient) ShouldNotify(ctx context.Context, in *ExposureNotificationRequest, opts ...grpc.CallOption) (*ExposureNotificationResponse, error) {
	out := new(ExposureNotificationResponse)
	err := c.cc.Invoke(ctx, "/scoringservice.NotificationServer/shouldNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServerServer is the server API for NotificationServer service.
type NotificationServerServer interface {
	// Send information on current and previously received exposures that haven't yet resulted in a notification.
	ShouldNotify(context.Context, *ExposureNotificationRequest) (*ExposureNotificationResponse, error)
}

// UnimplementedNotificationServerServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServerServer struct {
}

func (*UnimplementedNotificationServerServer) ShouldNotify(context.Context, *ExposureNotificationRequest) (*ExposureNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldNotify not implemented")
}

func RegisterNotificationServerServer(s *grpc.Server, srv NotificationServerServer) {
	s.RegisterService(&_NotificationServer_serviceDesc, srv)
}

func _NotificationServer_ShouldNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposureNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServerServer).ShouldNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scoringservice.NotificationServer/ShouldNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServerServer).ShouldNotify(ctx, req.(*ExposureNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scoringservice.NotificationServer",
	HandlerType: (*NotificationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shouldNotify",
			Handler:    _NotificationServer_ShouldNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification0.proto",
}

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	LogEvent(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogEvent(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/scoringservice.Logger/LogEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	LogEvent(context.Context, *LogRequest) (*LogResponse, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) LogEvent(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEvent not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scoringservice.Logger/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogEvent(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scoringservice.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEvent",
			Handler:    _Logger_LogEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification0.proto",
}
