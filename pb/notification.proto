syntax="proto3";

option go_package = ".;pb";

// import "google/protobuf/empty.proto";

package scoringservicerpc;

service NotificationServer {
    // rpc getExposureConfiguration (google.protobuf.Empty) returns (PCExposureConfiguration) {}
    rpc shouldNotify(ExposureNotificationRequest) returns (ExposureNotificationResponse) {}
}

// Exposure Configuration is now in a bucket
// message PCExposureConfiguration {
//     ENExposureConfiguration config = 1;
//     repeated float attenuationBucketWeights = 2;
//     int32 triggerThresholdWeightedDuration = 3;
// }

//     message ENExposureConfiguration {
//         int32 minimumRiskScore = 1;
//         repeated int32 attenuationDurationThresholds = 2;
//         repeated int32 attenuationLevelValues = 3;
//         repeated int32 daysSinceLastExposure = 4;
//         repeated int32 durationLevelValues = 5;
//         repeated int32 transmissionRiskLevelValues = 6;
//     }


message ExposureNotificationRequest {
    repeated ExposureNotification notification = 1;
}

    message ExposureNotification {
        int32 timestamp = 1;
        ExposureInformation info = 2;
    }

        message ExposureInformation {
            int32 timeReceived = 1;
            string usedInNotification = 2;
            int32 dateMillisSinceEpoch = 3;
            int32 durationMinutes = 4;
            int32 attenuationValue = 5;
            int32 totalRiskScore = 6;
            int32 attenuationDurationInMinutes = 7;
        }

message ExposureNotificationResponse {
    NotificationEvents history = 1;
    ExposureEvents event = 2;
    repeated ExposureInformation exposure_info = 3;
    UserState status = 4;
}

    message NotificationEvents {
        repeated ExposureNotification notification = 1;
        repeated Events event = 2;
    }

    message ExposureEvents {
        repeated Events event = 3;
    }

        message Events {
            int32 timestamp = 1;
            int32 transmissionRiskValue = 2;
            int32 durationRiskValue = 3;
            int32 daysRiskValue = 4;
            int32 attenuationRiskValue = 5;
            int32 exposureRiskValue = 6;
        }

    message UserState {
        repeated TestData data = 1;
    }

        message TestData {
            string dateReceived = 1;
            bool testResult = 2;
            string dateOfTest = 3;
        }